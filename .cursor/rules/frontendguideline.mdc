---
description: 
globs: 
alwaysApply: false
---
# Frontend Guideline Document for ZebraFetch

This document outlines everything you need to know about the ZebraFetch frontend setup. ZebraFetch does not include a traditional user-facing web application; instead, it provides interactive API documentation via Swagger-UI and ReDoc. Below you’ll find how these pieces work together, what principles guide them, and how to maintain consistency and quality.

## 1. Frontend Architecture

### Overview

*   ZebraFetch uses FastAPI’s built-in API documentation frontends:

    *   **Swagger-UI** served at `/docs`
    *   **ReDoc** served at `/redoc`

*   These are static, single-page applications (SPAs) generated by the server and delivered as HTML/CSS/JavaScript bundles.

### Support for Scalability, Maintainability, and Performance

*   **Scalability:** The frontend assets are served directly by Uvicorn behind FastAPI and can be cached by a CDN or reverse proxy (e.g., Nginx) if needed.
*   **Maintainability:** No custom code means minimal upkeep. Upgrading FastAPI automatically updates both Swagger-UI and ReDoc to their latest versions.
*   **Performance:** Static bundling ensures fast load times. Assets are lightweight, and the browser caches them on first load.

## 2. Design Principles

1.  **Usability:** The documentation frontends are interactive, letting users try endpoints directly in their browser.
2.  **Clarity:** Endpoints, parameters, request/response examples, and error codes are clearly laid out.
3.  **Consistency:** Styling and layout follow OpenAPI defaults, ensuring familiarity for anyone who’s used Swagger or ReDoc before.
4.  **Accessibility:** Both Swagger-UI and ReDoc strive to meet WCAG guidelines (keyboard navigation, proper ARIA labels).
5.  **Responsiveness:** These SPAs are mobile-friendly out of the box, adapting to smaller screens without extra configuration.

## 3. Styling and Theming

*   **Approach:** We rely on the default themes provided by Swagger-UI and ReDoc. No custom CSS is added.

*   **CSS Framework:** None—these UIs have their own embedded styling.

*   **Theming:** Customization (if needed) can be applied via FastAPI’s `swagger_ui_parameters` and `redoc_html` overrides:

    *   Change colors or fonts by supplying a custom CSS file in `FastAPI(..., swagger_ui_css=url, redoc_css=url)`.

*   **Default Style:** Modern, flat design with clear separation between sections.

*   **Color Palette (Swagger-UI Default):**

    *   Primary: #20a8d8 (blue)
    *   Accent: #fd6c48 (orange)
    *   Text: #333333 (dark gray)
    *   Background: #ffffff (white)

*   **Font:** Open Sans (loaded by Swagger and ReDoc automatically)

## 4. Component Structure

Since we are using packaged SPAs, there is no custom component tree. However, understanding the internal structure of these tools can help if you ever need to fork or tweak them:

*   **Swagger-UI:** Components are React-based, each endpoint is a collapsible panel (`Operation`, `Model`).
*   **ReDoc:** Components use TypeScript and React, organized into sections like `Info`, `Paths`, and `Schemas`.

**Key takeaway:** We treat these tools as black-box frontends—no local components to maintain.

## 5. State Management

No custom state management is needed on our side. The SPAs handle:

*   Active endpoint expansion/collapse
*   Form inputs for parameters and request bodies
*   Response rendering after API calls

All state lives in the user’s browser memory, managed by the respective SPA.

## 6. Routing and Navigation

*   **Swagger-UI:** Single route at `/docs`. All navigation (jump to endpoint, models, search) happens client-side.
*   **ReDoc:** Single route at `/redoc`. Supports deep links to specific endpoints via URL fragments.
*   **FastAPI Integration:** FastAPI auto-mounts these routes; no extra routing logic is required.

## 7. Performance Optimization

*   **Asset Caching:** Leverage HTTP cache headers (e.g., `Cache-Control`) at the proxy layer to cache the static bundles.
*   **Minified Bundles:** Both SPAs serve minified JS/CSS by default.
*   **CDN (Optional):** You can offload static files to a CDN for even faster global delivery.

These measures ensure the interactive docs load quickly and smoothly.

## 8. Testing and Quality Assurance

*   **Manual Smoke Tests:** Verify `/docs` and `/redoc` load without errors after deployment.
*   **Automated Link Checks:** Integrate a simple script in CI to fetch `/docs` and `/redoc` and ensure HTTP 200.
*   **Accessibility Audits (Optional):** Run an automated linter (e.g., Pa11y) against both routes to detect basic WCAG violations.

## 9. Conclusion and Overall Frontend Summary

ZebraFetch’s frontend footprint is small and focused entirely on interactive API documentation. By leveraging FastAPI’s built-in Swagger-UI and ReDoc, we gain a user-friendly, consistent, and low-maintenance interface for internal IT staff. This setup aligns perfectly with the project goals:

*   **Simplicity:** No extra code to write or maintain.
*   **Reliability:** Updates follow FastAPI’s release cycle.
*   **User Focus:** The primary users (IT staff via N8N/Paperless-NGX) get clear, testable documentation without a separate UI.

Should a custom frontend be needed in the future—for example, a dashboard to manage jobs—you can build it on top of these guidelines, choosing a component-based framework (React/Vue) and following the same principles of usability, consistency, and performance.

*End of Frontend Guideline Document*

